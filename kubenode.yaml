heat_template_version: 2013-05-23

description: >
  This is a nested stack that defines a single Kubernetes minion,
  based on a vanilla Fedora 20 cloud image.  This stack is included by
  a ResourceGroup resource in the parent template (kubecluster.yaml).

parameters:

  server_image:
    type: string
    default: fedora-20-x86_64-updated
    description: glance image used to boot the server

  server_flavor:
    type: string
    default: m1.small
    description: flavor to use when booting the server

  ssh_key_name:
    type: string
    description: name of ssh key to be provisioned on our server
    default: lars

  external_network_id:
    type: string
    description: uuid of a network to use for floating ip addresses

  bridge_address_base:
    type: string
    description: >
      first two octets of a /16 network to use for minion
      addresses.
    default: 10.251

  linkmanager_key:
    type: string
    description: >
      used to sign etcd keys that control vxlan
      overlay network.

  docker_volume_size:
    type: number
    description: size of docker volume
    default: 20

  gluster_volume_size:
    type: number
    description: size of volume allocated for gluster storage
    default: 40

  # The following are all generated in the parent template.
  kube_master_ip:
    type: string
    description: IP address of the Kubernetes master server.
  fixed_network_id:
    type: string
    description: Network from which to allocate fixed addresses.
  fixed_subnet_id:
    type: string
    description: Subnet from which to allocate fixed addresses.

resources:

  node_wait_handle:
    type: "AWS::CloudFormation::WaitConditionHandle"

  node_wait_condition:
    type: "AWS::CloudFormation::WaitCondition"
    depends_on:
      - kube_node
    properties:
      Handle:
        get_resource: node_wait_handle
      Timeout: "6000"

  # I am lazy, so this opens up all ports.
  secgroup_all_open:
    type: "OS::Neutron::SecurityGroup"
    properties:
      rules:
        - protocol: icmp
        - protocol: tcp
        - protocol: udp

  ######################################################################
  #
  # software config

  make_selinux_permissive:
    type: "OS::Heat::SoftwareConfig"
    properties:
      group: ungrouped
      config: {get_file: fragments/make-selinux-permissive.sh}

  setup_repositories:
    type: "OS::Heat::SoftwareConfig"
    properties:
      group: ungrouped
      config: {get_file: fragments/setup-repositories.sh}

  yum_common:
    type: "OS::Heat::SoftwareConfig"
    properties:
      group: ungrouped
      config: {get_file: fragments/yum-common.sh}

  install_gluster:
    type: "OS::Heat::SoftwareConfig"
    properties:
      group: ungrouped
      config: {get_file: fragments/install-gluster.sh}

  install_nsinit:
    type: "OS::Heat::SoftwareConfig"
    properties:
      group: ungrouped
      config: {get_file: fragments/install-nsinit.sh}

  install_docker:
    type: "OS::Heat::SoftwareConfig"
    properties:
      group: ungrouped
      config: {get_file: fragments/install-docker.sh}

  configure_minion_kubernetes:
    type: "OS::Heat::SoftwareConfig"
    properties:
      group: ungrouped
      config:
        str_replace:
          template: {get_file: fragments/configure-minion-kubernetes.sh}
          params:
            "$KUBE_MASTER_IP":
              get_param: kube_master_ip

  configure_minion_network:
    type: "OS::Heat::SoftwareConfig"
    properties:
      group: ungrouped
      config:
        str_replace:
          template: {get_file: fragments/configure-minion-network.sh}
          params:
            "$BRIDGE_ADDRESS_BASE":
              get_param: bridge_address_base

  configure_linkmanager:
    type: "OS::Heat::SoftwareConfig"
    properties:
      group: ungrouped
      config:
        str_replace:
          template: {get_file: fragments/configure-linkmanager.sh}
          params:
            "$KUBE_MASTER_IP":
              get_param: kube_master_ip
            "$LINKMANAGER_KEY":
              get_param: linkmanager_key

  configure_docker_volume:
    type: "OS::Heat::SoftwareConfig"
    properties:
      group: ungrouped
      config:
        str_replace:
          template: {get_file: fragments/configure-docker-volume.sh}
          params:
            "$DOCKER_VOLUME":
              get_resource: docker_volume

  configure_gluster_volume:
    type: "OS::Heat::SoftwareConfig"
    properties:
      group: ungrouped
      config:
        str_replace:
          template: {get_file: fragments/configure-gluster-volume.sh}
          params:
            "$GLUSTER_VOLUME":
              get_resource: gluster_volume

  cfn_signal:
    type: "OS::Heat::SoftwareConfig"
    properties:
      group: ungrouped
      config:
        str_replace:
          template: {get_file: fragments/cfn-signal.sh}
          params:
            "$WAIT_HANDLE": {get_resource: node_wait_handle}

  kube_node_init:
    type: "OS::Heat::MultipartMime"
    properties:
      parts:
        - config: {get_resource: make_selinux_permissive}
        - config: {get_resource: setup_repositories}
        - config: {get_resource: yum_common}
        - config: {get_resource: configure_docker_volume}
        - config: {get_resource: configure_gluster_volume}
        - config: {get_resource: install_gluster}
        - config: {get_resource: configure_minion_network}
        - config: {get_resource: install_docker}
        - config: {get_resource: configure_minion_kubernetes}
        - config: {get_resource: configure_linkmanager}
        - config: {get_resource: install_nsinit}
        - config: {get_resource: cfn_signal}

  kube_node:
    type: "OS::Nova::Server"
    properties:
      image:
        get_param: server_image
      flavor:
        get_param: server_flavor
      key_name:
        get_param: ssh_key_name
      user_data_format: RAW
      user_data: {get_resource: kube_node_init}
      networks:
        - port:
            get_resource: kube_node_eth0

  kube_node_eth0:
    type: "OS::Neutron::Port"
    properties:
      network_id:
        get_param: fixed_network_id
      security_groups:
        - get_resource: secgroup_all_open
      fixed_ips:
        - subnet_id:
            get_param: fixed_subnet_id

  kube_node_floating:
    type: "OS::Neutron::FloatingIP"
    properties:
      floating_network_id:
        get_param: external_network_id
      port_id:
        get_resource: kube_node_eth0

  docker_volume:
    type: "OS::Cinder::Volume"
    properties:
      size: {get_param: docker_volume_size}

  docker_volume_attach:
    type: "OS::Cinder::VolumeAttachment"
    properties:
      instance_uuid: {get_resource: kube_node}
      volume_id: {get_resource: docker_volume}

  gluster_volume:
    type: "OS::Cinder::Volume"
    properties:
      size: {get_param: gluster_volume_size}

  gluster_volume_attach:
    type: "OS::Cinder::VolumeAttachment"
    properties:
      instance_uuid: {get_resource: kube_node}
      volume_id: {get_resource: gluster_volume}

outputs:

  kube_node_ip:
    value: {get_attr: [kube_node_eth0, fixed_ips, 0, ip_address]}

  kube_node_external_ip:
    value: {get_attr: [kube_node_floating, floating_ip_address]}

